// Script ƒë·ªÉ add data v√†o MongoDB
// Ch·∫°y: node addData.js

import mongoose from 'mongoose';
import dotenv from 'dotenv';
import bcrypt from 'bcryptjs';

// Import models
import User from './src/models/User.js';
import Role from './src/models/Role.js';
import Recruiter from './src/models/Recruiter.js';
import Company from './src/models/Company.js';
import Job from './src/models/Job.js';

dotenv.config();

// K·∫øt n·ªëi MongoDB
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng');
  } catch (error) {
    console.error('‚ùå L·ªói k·∫øt n·ªëi MongoDB:', error);
    process.exit(1);
  }
};

// B∆∞·ªõc 1: T·∫°o Roles
const createRoles = async () => {
  console.log('\nüîÑ B∆∞·ªõc 1: T·∫°o Roles...');
  
  const existingRoles = await Role.find();
  if (existingRoles.length > 0) {
    console.log('‚ö†Ô∏è  Roles ƒë√£ t·ªìn t·∫°i, b·ªè qua...');
    return existingRoles;
  }

  const roles = await Role.insertMany([
    { name: 'admin' },
    { name: 'user' },
    { name: 'recruiter' },
    { name: 'guest' }
  ]);
  
  console.log('‚úÖ ƒê√£ t·∫°o 4 roles:', roles.map(r => r.name).join(', '));
  return roles;
};

// B∆∞·ªõc 2: T·∫°o Users
const createUsers = async (roles) => {
  console.log('\nüîÑ B∆∞·ªõc 2: T·∫°o Users...');
  
  const existingUsers = await User.find();
  if (existingUsers.length > 0) {
    console.log('‚ö†Ô∏è  Users ƒë√£ t·ªìn t·∫°i, b·ªè qua...');
    return existingUsers;
  }

  const users = await User.insertMany([
    {
      email: 'admin@jobpilot.com',
      username: 'admin',
      password: 'admin123456',
      firstName: 'Admin',
      lastName: 'User',
      role: roles.find(r => r.name === 'admin')._id,
      phoneNumber: '0123456789'
    },
    {
      email: 'recruiter@jobpilot.com',
      username: 'recruiter',
      password: 'recruiter123',
      firstName: 'John',
      lastName: 'Recruiter',
      role: roles.find(r => r.name === 'recruiter')._id,
      phoneNumber: '0987654321'
    },
    {
      email: 'user@jobpilot.com',
      username: 'user',
      password: 'user123456',
      firstName: 'Jane',
      lastName: 'User',
      role: roles.find(r => r.name === 'user')._id,
      phoneNumber: '0369258147'
    }
  ]);

  console.log('‚úÖ ƒê√£ t·∫°o 3 users:');
  console.log('   - Admin: admin@jobpilot.com / admin123456');
  console.log('   - Recruiter: recruiter@jobpilot.com / recruiter123');
  console.log('   - User: user@jobpilot.com / user123456');
  
  return users;
};

// B∆∞·ªõc 3: T·∫°o Recruiter
const createRecruiter = async (users) => {
  console.log('\nüîÑ B∆∞·ªõc 3: T·∫°o Recruiter...');
  
  const existingRecruiter = await Recruiter.find();
  if (existingRecruiter.length > 0) {
    console.log('‚ö†Ô∏è  Recruiter ƒë√£ t·ªìn t·∫°i, b·ªè qua...');
    return existingRecruiter[0];
  }

  const recruiterUser = users.find(u => u.email === 'recruiter@jobpilot.com');
  const recruiter = await Recruiter.create({
    user_id: recruiterUser._id,
    position: 'Senior HR Manager'
  });

  console.log('‚úÖ ƒê√£ t·∫°o recruiter:', recruiter.position);
  return recruiter;
};

// B∆∞·ªõc 4: T·∫°o Companies
const createCompanies = async (recruiter) => {
  console.log('\nüîÑ B∆∞·ªõc 4: T·∫°o Companies...');
  
  const existingCompanies = await Company.find();
  if (existingCompanies.length > 0) {
    console.log('‚ö†Ô∏è  Companies ƒë√£ t·ªìn t·∫°i, b·ªè qua...');
    return existingCompanies;
  }

  const companies = await Company.insertMany([
    {
      recruiter: recruiter._id,
      name: 'C√¥ng ty TNHH C√¥ng ngh·ªá ABC',
      logo: 'https://via.placeholder.com/150x150/4CAF50/FFFFFF?text=ABC',
      banner: 'https://via.placeholder.com/800x200/2196F3/FFFFFF?text=ABC+Technology',
      description: 'Ch√∫ng t√¥i l√† c√¥ng ty c√¥ng ngh·ªá h√†ng ƒë·∫ßu chuy√™n v·ªÅ ph√°t tri·ªÉn ph·∫ßn m·ªÅm v√† gi·∫£i ph√°p s·ªë h√≥a cho doanh nghi·ªáp.',
      benefits: 'B·∫£o hi·ªÉm s·ª©c kh·ªèe, ngh·ªâ ph√©p c√≥ l∆∞∆°ng, ƒë√†o t·∫°o k·ªπ nƒÉng, m√¥i tr∆∞·ªùng l√†m vi·ªác nƒÉng ƒë·ªông',
      vision: 'Tr·ªü th√†nh c√¥ng ty c√¥ng ngh·ªá h√†ng ƒë·∫ßu Vi·ªát Nam',
      social: {
        facebook: 'https://facebook.com/abctech',
        linkedin: 'https://linkedin.com/company/abctech',
        twitter: 'https://twitter.com/abctech',
        youtube: 'https://youtube.com/abctech'
      },
      contact: {
        email: 'contact@abctech.com',
        phone: '0123456789',
        website: 'https://abctech.com'
      },
      foundedDate: new Date('2020-01-15'),
      teamSize: 50,
      address: '123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM',
      industry: 'C√¥ng ngh·ªá th√¥ng tin'
    },
    {
      recruiter: recruiter._id,
      name: 'T·∫≠p ƒëo√†n XYZ',
      logo: 'https://via.placeholder.com/150x150/FF9800/FFFFFF?text=XYZ',
      banner: 'https://via.placeholder.com/800x200/E91E63/FFFFFF?text=XYZ+Group',
      description: 'T·∫≠p ƒëo√†n ƒëa ng√†nh v·ªõi c√°c ho·∫°t ƒë·ªông ch√≠nh trong lƒ©nh v·ª±c b·∫•t ƒë·ªông s·∫£n, t√†i ch√≠nh v√† du l·ªãch.',
      benefits: 'L∆∞∆°ng th∆∞·ªüng h·∫•p d·∫´n, c∆° h·ªôi thƒÉng ti·∫øn, du l·ªãch c√¥ng ty',
      vision: 'X√¢y d·ª±ng m·ªôt t·∫≠p ƒëo√†n b·ªÅn v·ªØng v√† ph√°t tri·ªÉn',
      social: {
        facebook: 'https://facebook.com/xyzgroup',
        linkedin: 'https://linkedin.com/company/xyzgroup'
      },
      contact: {
        email: 'hr@xyzgroup.com',
        phone: '0987654321',
        website: 'https://xyzgroup.com'
      },
      foundedDate: new Date('2015-06-20'),
      teamSize: 200,
      address: '456 ƒê∆∞·ªùng XYZ, Qu·∫≠n 3, TP.HCM',
      industry: 'B·∫•t ƒë·ªông s·∫£n'
    },
    {
      recruiter: recruiter._id,
      name: 'Startup DEF',
      logo: 'https://via.placeholder.com/150x150/9C27B0/FFFFFF?text=DEF',
      banner: 'https://via.placeholder.com/800x200/607D8B/FFFFFF?text=DEF+Startup',
      description: 'Startup fintech v·ªõi s·ª© m·ªánh c√°ch m·∫°ng h√≥a ng√†nh t√†i ch√≠nh t·∫°i Vi·ªát Nam.',
      benefits: 'C·ªï ph·∫ßn c√¥ng ty, m√¥i tr∆∞·ªùng startup nƒÉng ƒë·ªông, h·ªçc h·ªèi li√™n t·ª•c',
      vision: 'Democratize financial services for everyone',
      social: {
        facebook: 'https://facebook.com/defstartup',
        linkedin: 'https://linkedin.com/company/defstartup',
        twitter: 'https://twitter.com/defstartup'
      },
      contact: {
        email: 'hello@defstartup.com',
        phone: '0369258147',
        website: 'https://defstartup.com'
      },
      foundedDate: new Date('2022-03-10'),
      teamSize: 15,
      address: '789 ƒê∆∞·ªùng DEF, Qu·∫≠n 2, TP.HCM',
      industry: 'Fintech'
    }
  ]);

  console.log('‚úÖ ƒê√£ t·∫°o 3 companies:');
  companies.forEach((company, index) => {
    console.log(`   ${index + 1}. ${company.name} (${company.industry})`);
  });
  
  return companies;
};

// B∆∞·ªõc 5: T·∫°o Jobs
const createJobs = async (companies, recruiter) => {
  console.log('\nüîÑ B∆∞·ªõc 5: T·∫°o Jobs...');
  
  const existingJobs = await Job.find();
  if (existingJobs.length > 0) {
    console.log('‚ö†Ô∏è  Jobs ƒë√£ t·ªìn t·∫°i, b·ªè qua...');
    return existingJobs;
  }

  const jobs = await Job.insertMany([
    {
      title: 'Senior Frontend Developer',
      description: 'Ch√∫ng t√¥i ƒëang t√¨m ki·∫øm m·ªôt Senior Frontend Developer c√≥ kinh nghi·ªám v·ªõi React, Vue.js v√† c√°c framework hi·ªán ƒë·∫°i.',
      tags: 'React, Vue.js, JavaScript, TypeScript',
      role: 'Frontend Developer',
      minSalary: 15000000,
      maxSalary: 25000000,
      salaryType: 'VND',
      education: 'ƒê·∫°i h·ªçc',
      experience: '3-5 nƒÉm',
      jobType: 'FULL-TIME',
      vacancies: 2,
      expiration: new Date('2024-12-31'),
      jobLevel: 'Senior',
      country: 'Vietnam',
      city: 'Ho Chi Minh City',
      remote: true,
      benefits: ['B·∫£o hi·ªÉm s·ª©c kh·ªèe', 'Ngh·ªâ ph√©p c√≥ l∆∞∆°ng', 'ƒê√†o t·∫°o k·ªπ nƒÉng'],
      applyType: 'Jobpilot',
      company_id: companies[0]._id,
      recruiter_id: recruiter._id,
      requirements: 'C√≥ kinh nghi·ªám 3-5 nƒÉm v·ªõi React/Vue.js, hi·ªÉu bi·∫øt v·ªÅ TypeScript, c√≥ kinh nghi·ªám v·ªõi state management',
      desirable: 'C√≥ kinh nghi·ªám v·ªõi Next.js, GraphQL, c√≥ portfolio ƒë·∫πp',
      location: 'Ho Chi Minh City, Vietnam',
      isActive: true
    },
    {
      title: 'Backend Developer (Node.js)',
      description: 'T√¨m ki·∫øm Backend Developer c√≥ kinh nghi·ªám v·ªõi Node.js, Express, MongoDB ƒë·ªÉ ph√°t tri·ªÉn c√°c ·ª©ng d·ª•ng web.',
      tags: 'Node.js, Express, MongoDB, JavaScript',
      role: 'Backend Developer',
      minSalary: 12000000,
      maxSalary: 20000000,
      salaryType: 'VND',
      education: 'ƒê·∫°i h·ªçc',
      experience: '2-4 nƒÉm',
      jobType: 'FULL-TIME',
      vacancies: 3,
      expiration: new Date('2024-12-31'),
      jobLevel: 'Middle',
      country: 'Vietnam',
      city: 'Ho Chi Minh City',
      remote: false,
      benefits: ['B·∫£o hi·ªÉm s·ª©c kh·ªèe', 'Ngh·ªâ ph√©p c√≥ l∆∞∆°ng', 'ƒê√†o t·∫°o k·ªπ nƒÉng'],
      applyType: 'Jobpilot',
      company_id: companies[0]._id,
      recruiter_id: recruiter._id,
      requirements: 'C√≥ kinh nghi·ªám 2-4 nƒÉm v·ªõi Node.js, Express, MongoDB, hi·ªÉu bi·∫øt v·ªÅ RESTful API',
      desirable: 'C√≥ kinh nghi·ªám v·ªõi Docker, AWS, c√≥ kinh nghi·ªám v·ªõi microservices',
      location: 'Ho Chi Minh City, Vietnam',
      isActive: true
    },
    {
      title: 'Real Estate Sales Manager',
      description: 'T√¨m ki·∫øm Sales Manager c√≥ kinh nghi·ªám trong lƒ©nh v·ª±c b·∫•t ƒë·ªông s·∫£n ƒë·ªÉ qu·∫£n l√Ω ƒë·ªôi ng≈© sales v√† ph√°t tri·ªÉn th·ªã tr∆∞·ªùng.',
      tags: 'Sales, Real Estate, Management',
      role: 'Sales Manager',
      minSalary: 20000000,
      maxSalary: 35000000,
      salaryType: 'VND',
      education: 'ƒê·∫°i h·ªçc',
      experience: '5-7 nƒÉm',
      jobType: 'FULL-TIME',
      vacancies: 1,
      expiration: new Date('2024-12-31'),
      jobLevel: 'Senior',
      country: 'Vietnam',
      city: 'Ho Chi Minh City',
      remote: false,
      benefits: ['L∆∞∆°ng th∆∞·ªüng h·∫•p d·∫´n', 'C∆° h·ªôi thƒÉng ti·∫øn', 'Du l·ªãch c√¥ng ty'],
      applyType: 'Jobpilot',
      company_id: companies[1]._id,
      recruiter_id: recruiter._id,
      requirements: 'C√≥ kinh nghi·ªám 5-7 nƒÉm trong lƒ©nh v·ª±c b·∫•t ƒë·ªông s·∫£n, c√≥ kh·∫£ nƒÉng qu·∫£n l√Ω ƒë·ªôi ng≈©',
      desirable: 'C√≥ m·∫°ng l∆∞·ªõi kh√°ch h√†ng r·ªông, c√≥ ch·ª©ng ch·ªâ b·∫•t ƒë·ªông s·∫£n',
      location: 'Ho Chi Minh City, Vietnam',
      isActive: true
    },
    {
      title: 'Fintech Product Manager',
      description: 'T√¨m ki·∫øm Product Manager c√≥ kinh nghi·ªám trong lƒ©nh v·ª±c fintech ƒë·ªÉ ph√°t tri·ªÉn v√† qu·∫£n l√Ω c√°c s·∫£n ph·∫©m t√†i ch√≠nh.',
      tags: 'Product Management, Fintech, Finance',
      role: 'Product Manager',
      minSalary: 18000000,
      maxSalary: 30000000,
      salaryType: 'VND',
      education: 'ƒê·∫°i h·ªçc',
      experience: '4-6 nƒÉm',
      jobType: 'FULL-TIME',
      vacancies: 1,
      expiration: new Date('2024-12-31'),
      jobLevel: 'Senior',
      country: 'Vietnam',
      city: 'Ho Chi Minh City',
      remote: true,
      benefits: ['C·ªï ph·∫ßn c√¥ng ty', 'M√¥i tr∆∞·ªùng startup nƒÉng ƒë·ªông', 'H·ªçc h·ªèi li√™n t·ª•c'],
      applyType: 'Jobpilot',
      company_id: companies[2]._id,
      recruiter_id: recruiter._id,
      requirements: 'C√≥ kinh nghi·ªám 4-6 nƒÉm trong lƒ©nh v·ª±c fintech, hi·ªÉu bi·∫øt v·ªÅ c√°c s·∫£n ph·∫©m t√†i ch√≠nh',
      desirable: 'C√≥ kinh nghi·ªám v·ªõi Agile/Scrum, c√≥ kinh nghi·ªám v·ªõi payment systems',
      location: 'Ho Chi Minh City, Vietnam',
      isActive: true
    },
    {
      title: 'UI/UX Designer',
      description: 'T√¨m ki·∫øm UI/UX Designer c√≥ kinh nghi·ªám thi·∫øt k·∫ø giao di·ªán ng∆∞·ªùi d√πng cho c√°c ·ª©ng d·ª•ng web v√† mobile.',
      tags: 'UI/UX, Design, Figma, Adobe',
      role: 'UI/UX Designer',
      minSalary: 10000000,
      maxSalary: 18000000,
      salaryType: 'VND',
      education: 'ƒê·∫°i h·ªçc',
      experience: '2-4 nƒÉm',
      jobType: 'FULL-TIME',
      vacancies: 2,
      expiration: new Date('2024-12-31'),
      jobLevel: 'Middle',
      country: 'Vietnam',
      city: 'Ho Chi Minh City',
      remote: true,
      benefits: ['B·∫£o hi·ªÉm s·ª©c kh·ªèe', 'Ngh·ªâ ph√©p c√≥ l∆∞∆°ng', 'ƒê√†o t·∫°o k·ªπ nƒÉng'],
      applyType: 'Jobpilot',
      company_id: companies[0]._id,
      recruiter_id: recruiter._id,
      requirements: 'C√≥ kinh nghi·ªám 2-4 nƒÉm v·ªõi UI/UX design, th√†nh th·∫°o Figma, Adobe Creative Suite',
      desirable: 'C√≥ kinh nghi·ªám v·ªõi prototyping, c√≥ portfolio ƒë·∫πp',
      location: 'Ho Chi Minh City, Vietnam',
      isActive: true
    }
  ]);

  console.log('‚úÖ ƒê√£ t·∫°o 5 jobs:');
  jobs.forEach((job, index) => {
    console.log(`   ${index + 1}. ${job.title} (${job.jobLevel})`);
  });
  
  return jobs;
};

// Ch·∫°y t·∫•t c·∫£ c√°c b∆∞·ªõc
const runAddData = async () => {
  try {
    console.log('üöÄ B·∫Øt ƒë·∫ßu add data v√†o MongoDB...\n');
    
    await connectDB();
    
    const roles = await createRoles();
    const users = await createUsers(roles);
    const recruiter = await createRecruiter(users);
    const companies = await createCompanies(recruiter);
    const jobs = await createJobs(companies, recruiter);
    
    console.log('\nüéâ HO√ÄN TH√ÄNH! ƒê√£ add data th√†nh c√¥ng:');
    console.log(`   - ${roles.length} roles`);
    console.log(`   - ${users.length} users`);
    console.log(`   - 1 recruiter`);
    console.log(`   - ${companies.length} companies`);
    console.log(`   - ${jobs.length} jobs`);
    
    console.log('\nüîë Th√¥ng tin ƒëƒÉng nh·∫≠p:');
    console.log('   Admin: admin@jobpilot.com / admin123456');
    console.log('   Recruiter: recruiter@jobpilot.com / recruiter123');
    console.log('   User: user@jobpilot.com / user123456');
    
  } catch (error) {
    console.error('‚ùå L·ªói khi add data:', error);
  } finally {
    await mongoose.connection.close();
    console.log('\nüîå ƒê√£ ƒë√≥ng k·∫øt n·ªëi MongoDB');
  }
};

// Ch·∫°y script
runAddData();

